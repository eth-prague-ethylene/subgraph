// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminPropertiesSet extends ethereum.Event {
  get params(): AdminPropertiesSet__Params {
    return new AdminPropertiesSet__Params(this);
  }
}

export class AdminPropertiesSet__Params {
  _event: AdminPropertiesSet;

  constructor(event: AdminPropertiesSet) {
    this._event = event;
  }

  get defaultCurrency(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get defaultLiveness(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get burnedBondPercentage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssertionDisputed extends ethereum.Event {
  get params(): AssertionDisputed__Params {
    return new AssertionDisputed__Params(this);
  }
}

export class AssertionDisputed__Params {
  _event: AssertionDisputed;

  constructor(event: AssertionDisputed) {
    this._event = event;
  }

  get assertionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get disputer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AssertionMade extends ethereum.Event {
  get params(): AssertionMade__Params {
    return new AssertionMade__Params(this);
  }
}

export class AssertionMade__Params {
  _event: AssertionMade;

  constructor(event: AssertionMade) {
    this._event = event;
  }

  get assertionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get domainId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get claim(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get asserter(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get callbackRecipient(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get escalationManager(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get expirationTime(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get bond(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get identifier(): Bytes {
    return this._event.parameters[10].value.toBytes();
  }
}

export class AssertionSettled extends ethereum.Event {
  get params(): AssertionSettled__Params {
    return new AssertionSettled__Params(this);
  }
}

export class AssertionSettled__Params {
  _event: AssertionSettled;

  constructor(event: AssertionSettled) {
    this._event = event;
  }

  get assertionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get bondRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get disputed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get settlementResolution(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get settleCaller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OptimisticOracleV3__assertionsResultEscalationManagerSettingsStruct extends ethereum.Tuple {
  get arbitrateViaEscalationManager(): boolean {
    return this[0].toBoolean();
  }

  get discardOracle(): boolean {
    return this[1].toBoolean();
  }

  get validateDisputers(): boolean {
    return this[2].toBoolean();
  }

  get assertingCaller(): Address {
    return this[3].toAddress();
  }

  get escalationManager(): Address {
    return this[4].toAddress();
  }
}

export class OptimisticOracleV3__assertionsResult {
  value0: OptimisticOracleV3__assertionsResultEscalationManagerSettingsStruct;
  value1: Address;
  value2: BigInt;
  value3: boolean;
  value4: Address;
  value5: BigInt;
  value6: boolean;
  value7: Bytes;
  value8: Bytes;
  value9: BigInt;
  value10: Address;
  value11: Address;

  constructor(
    value0: OptimisticOracleV3__assertionsResultEscalationManagerSettingsStruct,
    value1: Address,
    value2: BigInt,
    value3: boolean,
    value4: Address,
    value5: BigInt,
    value6: boolean,
    value7: Bytes,
    value8: Bytes,
    value9: BigInt,
    value10: Address,
    value11: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromFixedBytes(this.value7));
    map.set("value8", ethereum.Value.fromFixedBytes(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    map.set("value11", ethereum.Value.fromAddress(this.value11));
    return map;
  }

  getEscalationManagerSettings(): OptimisticOracleV3__assertionsResultEscalationManagerSettingsStruct {
    return this.value0;
  }

  getAsserter(): Address {
    return this.value1;
  }

  getAssertionTime(): BigInt {
    return this.value2;
  }

  getSettled(): boolean {
    return this.value3;
  }

  getCurrency(): Address {
    return this.value4;
  }

  getExpirationTime(): BigInt {
    return this.value5;
  }

  getSettlementResolution(): boolean {
    return this.value6;
  }

  getDomainId(): Bytes {
    return this.value7;
  }

  getIdentifier(): Bytes {
    return this.value8;
  }

  getBond(): BigInt {
    return this.value9;
  }

  getCallbackRecipient(): Address {
    return this.value10;
  }

  getDisputer(): Address {
    return this.value11;
  }
}

export class OptimisticOracleV3__cachedCurrenciesResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getIsWhitelisted(): boolean {
    return this.value0;
  }

  getFinalFee(): BigInt {
    return this.value1;
  }
}

export class OptimisticOracleV3__getAssertionResultValue0Struct extends ethereum.Tuple {
  get escalationManagerSettings(): OptimisticOracleV3__getAssertionResultValue0EscalationManagerSettingsStruct {
    return changetype<
      OptimisticOracleV3__getAssertionResultValue0EscalationManagerSettingsStruct
    >(this[0].toTuple());
  }

  get asserter(): Address {
    return this[1].toAddress();
  }

  get assertionTime(): BigInt {
    return this[2].toBigInt();
  }

  get settled(): boolean {
    return this[3].toBoolean();
  }

  get currency(): Address {
    return this[4].toAddress();
  }

  get expirationTime(): BigInt {
    return this[5].toBigInt();
  }

  get settlementResolution(): boolean {
    return this[6].toBoolean();
  }

  get domainId(): Bytes {
    return this[7].toBytes();
  }

  get identifier(): Bytes {
    return this[8].toBytes();
  }

  get bond(): BigInt {
    return this[9].toBigInt();
  }

  get callbackRecipient(): Address {
    return this[10].toAddress();
  }

  get disputer(): Address {
    return this[11].toAddress();
  }
}

export class OptimisticOracleV3__getAssertionResultValue0EscalationManagerSettingsStruct extends ethereum.Tuple {
  get arbitrateViaEscalationManager(): boolean {
    return this[0].toBoolean();
  }

  get discardOracle(): boolean {
    return this[1].toBoolean();
  }

  get validateDisputers(): boolean {
    return this[2].toBoolean();
  }

  get assertingCaller(): Address {
    return this[3].toAddress();
  }

  get escalationManager(): Address {
    return this[4].toAddress();
  }
}

export class OptimisticOracleV3 extends ethereum.SmartContract {
  static bind(address: Address): OptimisticOracleV3 {
    return new OptimisticOracleV3("OptimisticOracleV3", address);
  }

  assertTruth(
    claim: Bytes,
    asserter: Address,
    callbackRecipient: Address,
    escalationManager: Address,
    liveness: BigInt,
    currency: Address,
    bond: BigInt,
    identifier: Bytes,
    domainId: Bytes
  ): Bytes {
    let result = super.call(
      "assertTruth",
      "assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromBytes(claim),
        ethereum.Value.fromAddress(asserter),
        ethereum.Value.fromAddress(callbackRecipient),
        ethereum.Value.fromAddress(escalationManager),
        ethereum.Value.fromUnsignedBigInt(liveness),
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(bond),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromFixedBytes(domainId)
      ]
    );

    return result[0].toBytes();
  }

  try_assertTruth(
    claim: Bytes,
    asserter: Address,
    callbackRecipient: Address,
    escalationManager: Address,
    liveness: BigInt,
    currency: Address,
    bond: BigInt,
    identifier: Bytes,
    domainId: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "assertTruth",
      "assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromBytes(claim),
        ethereum.Value.fromAddress(asserter),
        ethereum.Value.fromAddress(callbackRecipient),
        ethereum.Value.fromAddress(escalationManager),
        ethereum.Value.fromUnsignedBigInt(liveness),
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(bond),
        ethereum.Value.fromFixedBytes(identifier),
        ethereum.Value.fromFixedBytes(domainId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  assertTruthWithDefaults(claim: Bytes, asserter: Address): Bytes {
    let result = super.call(
      "assertTruthWithDefaults",
      "assertTruthWithDefaults(bytes,address):(bytes32)",
      [ethereum.Value.fromBytes(claim), ethereum.Value.fromAddress(asserter)]
    );

    return result[0].toBytes();
  }

  try_assertTruthWithDefaults(
    claim: Bytes,
    asserter: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "assertTruthWithDefaults",
      "assertTruthWithDefaults(bytes,address):(bytes32)",
      [ethereum.Value.fromBytes(claim), ethereum.Value.fromAddress(asserter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  assertions(param0: Bytes): OptimisticOracleV3__assertionsResult {
    let result = super.call(
      "assertions",
      "assertions(bytes32):((bool,bool,bool,address,address),address,uint64,bool,address,uint64,bool,bytes32,bytes32,uint256,address,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return changetype<OptimisticOracleV3__assertionsResult>(
      new OptimisticOracleV3__assertionsResult(
        changetype<
          OptimisticOracleV3__assertionsResultEscalationManagerSettingsStruct
        >(result[0].toTuple()),
        result[1].toAddress(),
        result[2].toBigInt(),
        result[3].toBoolean(),
        result[4].toAddress(),
        result[5].toBigInt(),
        result[6].toBoolean(),
        result[7].toBytes(),
        result[8].toBytes(),
        result[9].toBigInt(),
        result[10].toAddress(),
        result[11].toAddress()
      )
    );
  }

  try_assertions(
    param0: Bytes
  ): ethereum.CallResult<OptimisticOracleV3__assertionsResult> {
    let result = super.tryCall(
      "assertions",
      "assertions(bytes32):((bool,bool,bool,address,address),address,uint64,bool,address,uint64,bool,bytes32,bytes32,uint256,address,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OptimisticOracleV3__assertionsResult>(
        new OptimisticOracleV3__assertionsResult(
          changetype<
            OptimisticOracleV3__assertionsResultEscalationManagerSettingsStruct
          >(value[0].toTuple()),
          value[1].toAddress(),
          value[2].toBigInt(),
          value[3].toBoolean(),
          value[4].toAddress(),
          value[5].toBigInt(),
          value[6].toBoolean(),
          value[7].toBytes(),
          value[8].toBytes(),
          value[9].toBigInt(),
          value[10].toAddress(),
          value[11].toAddress()
        )
      )
    );
  }

  burnedBondPercentage(): BigInt {
    let result = super.call(
      "burnedBondPercentage",
      "burnedBondPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_burnedBondPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnedBondPercentage",
      "burnedBondPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cachedCurrencies(
    param0: Address
  ): OptimisticOracleV3__cachedCurrenciesResult {
    let result = super.call(
      "cachedCurrencies",
      "cachedCurrencies(address):(bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new OptimisticOracleV3__cachedCurrenciesResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_cachedCurrencies(
    param0: Address
  ): ethereum.CallResult<OptimisticOracleV3__cachedCurrenciesResult> {
    let result = super.tryCall(
      "cachedCurrencies",
      "cachedCurrencies(address):(bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptimisticOracleV3__cachedCurrenciesResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  cachedIdentifiers(param0: Bytes): boolean {
    let result = super.call(
      "cachedIdentifiers",
      "cachedIdentifiers(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_cachedIdentifiers(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cachedIdentifiers",
      "cachedIdentifiers(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cachedOracle(): Address {
    let result = super.call("cachedOracle", "cachedOracle():(address)", []);

    return result[0].toAddress();
  }

  try_cachedOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("cachedOracle", "cachedOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultCurrency(): Address {
    let result = super.call(
      "defaultCurrency",
      "defaultCurrency():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_defaultCurrency(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultCurrency",
      "defaultCurrency():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultIdentifier(): Bytes {
    let result = super.call(
      "defaultIdentifier",
      "defaultIdentifier():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_defaultIdentifier(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "defaultIdentifier",
      "defaultIdentifier():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  defaultLiveness(): BigInt {
    let result = super.call(
      "defaultLiveness",
      "defaultLiveness():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultLiveness(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultLiveness",
      "defaultLiveness():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finder(): Address {
    let result = super.call("finder", "finder():(address)", []);

    return result[0].toAddress();
  }

  try_finder(): ethereum.CallResult<Address> {
    let result = super.tryCall("finder", "finder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAssertion(
    assertionId: Bytes
  ): OptimisticOracleV3__getAssertionResultValue0Struct {
    let result = super.call(
      "getAssertion",
      "getAssertion(bytes32):(((bool,bool,bool,address,address),address,uint64,bool,address,uint64,bool,bytes32,bytes32,uint256,address,address))",
      [ethereum.Value.fromFixedBytes(assertionId)]
    );

    return changetype<OptimisticOracleV3__getAssertionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAssertion(
    assertionId: Bytes
  ): ethereum.CallResult<OptimisticOracleV3__getAssertionResultValue0Struct> {
    let result = super.tryCall(
      "getAssertion",
      "getAssertion(bytes32):(((bool,bool,bool,address,address),address,uint64,bool,address,uint64,bool,bytes32,bytes32,uint256,address,address))",
      [ethereum.Value.fromFixedBytes(assertionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OptimisticOracleV3__getAssertionResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getAssertionResult(assertionId: Bytes): boolean {
    let result = super.call(
      "getAssertionResult",
      "getAssertionResult(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(assertionId)]
    );

    return result[0].toBoolean();
  }

  try_getAssertionResult(assertionId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getAssertionResult",
      "getAssertionResult(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(assertionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentTime(): BigInt {
    let result = super.call("getCurrentTime", "getCurrentTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentTime",
      "getCurrentTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinimumBond(currency: Address): BigInt {
    let result = super.call(
      "getMinimumBond",
      "getMinimumBond(address):(uint256)",
      [ethereum.Value.fromAddress(currency)]
    );

    return result[0].toBigInt();
  }

  try_getMinimumBond(currency: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumBond",
      "getMinimumBond(address):(uint256)",
      [ethereum.Value.fromAddress(currency)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  numericalTrue(): BigInt {
    let result = super.call("numericalTrue", "numericalTrue():(int256)", []);

    return result[0].toBigInt();
  }

  try_numericalTrue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numericalTrue", "numericalTrue():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settleAndGetAssertionResult(assertionId: Bytes): boolean {
    let result = super.call(
      "settleAndGetAssertionResult",
      "settleAndGetAssertionResult(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(assertionId)]
    );

    return result[0].toBoolean();
  }

  try_settleAndGetAssertionResult(
    assertionId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "settleAndGetAssertionResult",
      "settleAndGetAssertionResult(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(assertionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stampAssertion(assertionId: Bytes): Bytes {
    let result = super.call(
      "stampAssertion",
      "stampAssertion(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(assertionId)]
    );

    return result[0].toBytes();
  }

  try_stampAssertion(assertionId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "stampAssertion",
      "stampAssertion(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(assertionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _finder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _defaultCurrency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _defaultLiveness(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AssertTruthCall extends ethereum.Call {
  get inputs(): AssertTruthCall__Inputs {
    return new AssertTruthCall__Inputs(this);
  }

  get outputs(): AssertTruthCall__Outputs {
    return new AssertTruthCall__Outputs(this);
  }
}

export class AssertTruthCall__Inputs {
  _call: AssertTruthCall;

  constructor(call: AssertTruthCall) {
    this._call = call;
  }

  get claim(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get asserter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get callbackRecipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get escalationManager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get liveness(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get bond(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get identifier(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get domainId(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class AssertTruthCall__Outputs {
  _call: AssertTruthCall;

  constructor(call: AssertTruthCall) {
    this._call = call;
  }

  get assertionId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AssertTruthWithDefaultsCall extends ethereum.Call {
  get inputs(): AssertTruthWithDefaultsCall__Inputs {
    return new AssertTruthWithDefaultsCall__Inputs(this);
  }

  get outputs(): AssertTruthWithDefaultsCall__Outputs {
    return new AssertTruthWithDefaultsCall__Outputs(this);
  }
}

export class AssertTruthWithDefaultsCall__Inputs {
  _call: AssertTruthWithDefaultsCall;

  constructor(call: AssertTruthWithDefaultsCall) {
    this._call = call;
  }

  get claim(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get asserter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AssertTruthWithDefaultsCall__Outputs {
  _call: AssertTruthWithDefaultsCall;

  constructor(call: AssertTruthWithDefaultsCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class DisputeAssertionCall extends ethereum.Call {
  get inputs(): DisputeAssertionCall__Inputs {
    return new DisputeAssertionCall__Inputs(this);
  }

  get outputs(): DisputeAssertionCall__Outputs {
    return new DisputeAssertionCall__Outputs(this);
  }
}

export class DisputeAssertionCall__Inputs {
  _call: DisputeAssertionCall;

  constructor(call: DisputeAssertionCall) {
    this._call = call;
  }

  get assertionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get disputer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DisputeAssertionCall__Outputs {
  _call: DisputeAssertionCall;

  constructor(call: DisputeAssertionCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAdminPropertiesCall extends ethereum.Call {
  get inputs(): SetAdminPropertiesCall__Inputs {
    return new SetAdminPropertiesCall__Inputs(this);
  }

  get outputs(): SetAdminPropertiesCall__Outputs {
    return new SetAdminPropertiesCall__Outputs(this);
  }
}

export class SetAdminPropertiesCall__Inputs {
  _call: SetAdminPropertiesCall;

  constructor(call: SetAdminPropertiesCall) {
    this._call = call;
  }

  get _defaultCurrency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _defaultLiveness(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _burnedBondPercentage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetAdminPropertiesCall__Outputs {
  _call: SetAdminPropertiesCall;

  constructor(call: SetAdminPropertiesCall) {
    this._call = call;
  }
}

export class SettleAndGetAssertionResultCall extends ethereum.Call {
  get inputs(): SettleAndGetAssertionResultCall__Inputs {
    return new SettleAndGetAssertionResultCall__Inputs(this);
  }

  get outputs(): SettleAndGetAssertionResultCall__Outputs {
    return new SettleAndGetAssertionResultCall__Outputs(this);
  }
}

export class SettleAndGetAssertionResultCall__Inputs {
  _call: SettleAndGetAssertionResultCall;

  constructor(call: SettleAndGetAssertionResultCall) {
    this._call = call;
  }

  get assertionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SettleAndGetAssertionResultCall__Outputs {
  _call: SettleAndGetAssertionResultCall;

  constructor(call: SettleAndGetAssertionResultCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SettleAssertionCall extends ethereum.Call {
  get inputs(): SettleAssertionCall__Inputs {
    return new SettleAssertionCall__Inputs(this);
  }

  get outputs(): SettleAssertionCall__Outputs {
    return new SettleAssertionCall__Outputs(this);
  }
}

export class SettleAssertionCall__Inputs {
  _call: SettleAssertionCall;

  constructor(call: SettleAssertionCall) {
    this._call = call;
  }

  get assertionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SettleAssertionCall__Outputs {
  _call: SettleAssertionCall;

  constructor(call: SettleAssertionCall) {
    this._call = call;
  }
}

export class SyncUmaParamsCall extends ethereum.Call {
  get inputs(): SyncUmaParamsCall__Inputs {
    return new SyncUmaParamsCall__Inputs(this);
  }

  get outputs(): SyncUmaParamsCall__Outputs {
    return new SyncUmaParamsCall__Outputs(this);
  }
}

export class SyncUmaParamsCall__Inputs {
  _call: SyncUmaParamsCall;

  constructor(call: SyncUmaParamsCall) {
    this._call = call;
  }

  get identifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SyncUmaParamsCall__Outputs {
  _call: SyncUmaParamsCall;

  constructor(call: SyncUmaParamsCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
